---
title: "Managing Python Virtual Environments with UV"
subtitle: "github.com/marcdotson/pydata-uv"
author: "Kaden Buffaloe and Marc Dotson"
title-slide-attributes:
  data-background-color: "#0F2439"
format: 
  revealjs:
    theme: slides.scss     # Modified slides theme
    code-copy: true        # Show code blocks copy button
    slide-number: c/t      # Numbered slides current/total
    embed-resources: true  # Render to a single HTML file
execute:
  eval: false
  echo: true
jupyter: python3
---

## 

:::: {.columns .v-center}

::: {.column width="40%"}
![](../figures/pydata.png){fig-align="center"}
:::

::: {.column width="60%"}
::: {.incremental}
- Club and professional forum to learn/retool
- Global network of chapters
- Workshops vary from beginning to advanced
- Polyglot (Python, Julia, R, etc.)
- We follow the [PyData Code of Conduct](https://pydata.org/code-of-conduct/)
- Join at [meetup.com/pydata-northern-utah](https://www.meetup.com/pydata-northern-utah/)
:::
:::

::::

# Python Environments {background-color="#288DC2"}

I recommend using [uv](https://docs.astral.sh/uv/), a single unified tool for installing and managing both Python versions and project environments

# Walkthrough {background-color="#288DC2"}

##  Installation

Get started by [installing uv](https://docs.astral.sh/uv/getting-started/installation/) via the command line


::: {.callout-note title="The Command Line"}
If using the command line (i.e., terminal or shell) is new to you, be patient, take your time, and follow instructions from a trusted source closely. A few things that might help:

- The command line is the programming interface into your OS itself. You don't have to know everything about it to follow instructions.
- Instructions can be different based on the *type* of command line. If you're on a Mac that's running macOS Catalina 10.15.7 or later, the terminal is Zsh. If you're using Linux, the shell is Bash (and you probably already know that). And if you're using Windows you're working with PowerShell.
:::

## Download Latest Version of `uv`
-   **On macOS:** Press `Cmd + Space`, type **Terminal**, and press Enter.
-   **On Windows:** Open the Start Menu, type **PowerShell**, and press Enter.


### macOS and Linux
Use `curl` to download and execute:
```bash
# Install the latest version of uv
curl -LsSf https://astral.sh/uv/install.sh | sh
```

### Windows
Use `PowerShell` to download and execute:
```powershell
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```
### However, `pip` can also be used:
```powershell
pip install uv
```
::: {.callout-tip title="Verify Installation"}
- You can simply run `uv` in the command line to verify it has been installed. 
:::

## Managing Python Versions 

Once you have uv installed, itâ€™s easy to install and manage Python versions. From the command line you can run:

```bash
#Install the latest stable release of Python.
uv python install

#View available Python versions to install.
uv python list

#Find an installed Python version.
uv python find

#Pin the current project to use a specific Python version.
uv python pin

#Uninstall a Python version.
uv python uninstall

```

## Navigate to a Projecet Directory

Using the command line or using a code editor or IDE like [Positron](https://github.com/marcdotson/data-stack?tab=readme-ov-file#sec-positron), locate or create the directory you would like to use. This working directory **should not** be in a location on your local machine **that is being synced to the cloud** via OneDrive, iCloud, etc.

### macOS and Linux

```bash
# Replace with the actual path to your folder
cd ~/Documents/my-python-project-folder
```

### Windows

```powershell
# Replace with the actual path to your folder
cd C:\Users\YourUser\Documents\my-python-project-folder
```
:::{.callout-tip title="**Pro Tip**"}

* Dragging a folder from your file explorer and dropping it into the terminal window will paste its full path automatically!
:::

## Create a Project Environment

**Run `uv init`** to initialize a project environment. This creates a `pyproject.toml` file with metadata about the project and a hidden `.python-version` file that specifies the default version of Python for the project. (It also creates `main.py` and `README.md` files that you can use or delete.)

```bash
uv init
```
:::: {.columns}
![](../figures/file-structure-example.png){fig-align="center"}
::::




##
Use more at [the data stack training](https://github.com/marcdotson/data-stack)

# {background-color="#0F2439"}

:::: {.columns .v-center}
![](../figures/pydata-northern-utah-qr.png){fig-align="center"}
::::
